//ALL REQUEST PROTOS SHOULD INCLUDE A MinimumUserProto AS REQUIRED that represents which client sent it/triggered it 

import "Info.proto";

package com.lvl6.proto;

option java_outer_classname = "EventProto";

//------------------------------------------------------------------------------------------

																						//DONE
message ChatRequestProto {
    required MinimumUserProto sender = 1; 
	repeated MinimumUserProto recipients = 2;
	required string message = 3;
}

																						//DONE
message ChatResponseProto {
    required MinimumUserProto sender = 1; 
	required string message = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message BattleRequestProto {
    required MinimumUserProto attacker = 1; 
    required MinimumUserProto defender = 2; 
    required BattleResult battleResult = 3;
    optional int32 neutralCityId = 4;
    
    enum BattleResult {
    	ATTACKER_WIN = 0;
    	DEFENDER_WIN = 1;
    }
}

																						//DONE
message BattleResponseProto {
    required MinimumUserProto attacker = 1;
    required MinimumUserProto defender = 2;
	required BattleStatus status = 3;

	optional int32 coinsGained = 4;
	optional FullEquipProto equipGained = 5;
    optional int32 expGained = 6;
    
    enum BattleStatus {
		SUCCESS = 0;
		OTHER_FAIL = 1;
	} 
}

//------------------------------------------------------------------------------------------

																						//DONE
message VaultRequestProto {
   enum VaultRequestType {
		DEPOSIT = 0; 
		WITHDRAW = 1;
	} 
	required MinimumUserProto sender = 1;
	optional VaultRequestType requestType = 2;
	optional int32 amount = 3;
}

																						//DONE
message VaultResponseProto {
	required MinimumUserProto sender = 1;
	optional int32 vaultAmount = 2;
	optional int32 coinAmount = 3;
}

//------------------------------------------------------------------------------------------

																						//DONE
message ArmoryRequestProto {
   enum ArmoryRequestType {
		BUY = 0; 
		SELL = 1;
	} 
	required MinimumUserProto sender = 1;
	required ArmoryRequestType requestType = 2;
	required int32 quantity = 3;
	required int32 equipId = 4;	
}

																						//DONE
message ArmoryResponseProto {
	required MinimumUserProto sender = 1;
	required ArmoryStatus status = 2;
	
	enum ArmoryStatus {
		SUCCESS = 0; 
		NOT_ENOUGH_EQUIP_TO_SELL = 1;
		NOT_ENOUGH_CURRENCY_TO_BUY = 2;
		CANNOT_SELL_DIAMOND_EQUIP = 3;
		OTHER_FAIL = 4;
	} 
}

//------------------------------------------------------------------------------------------

message StartupRequestProto {				//client will also send ChangeUserLocationRequestProto
     required string udid = 1;
     required float versionNum = 2;	//1.0->2.0 critical, 1.0->1.1 minor. server checks db for latest vnum
}

message StartupResponseProto {
     optional FullUserProto sender = 1;
     required StartupStatus startupStatus= 2;
     required UpdateStatus updateStatus= 3;
     optional int32 maxCityIdAccessibleToUser = 4;     //cityids must be in order of min_level
     optional FullUserStructureProto structures = 5;
     optional int32 questLog = 6;
     repeated string productIds = 7;
     optional int32 diamondCostForEnergyRefill = 8; 
     optional int32 diamondCostForStaminaRefill = 9;
     repeated FullUserEquipProto userEquips = 10; 
     
     enum UpdateStatus {
     	NO_UPDATE = 0;
     	MINOR_UPDATE = 1;
     	MAJOR_UPDATE = 2;
     }
     
	enum StartupStatus {
		USER_IN_DB = 0; 
		USER_NOT_IN_DB = 1;
	}    
}

//------------------------------------------------------------------------------------------
//CALLED: AFTER THE TUTORIAL

message UserCreateRequestProto {
     required string udid = 1;
     required string name = 2;
     repeated FullUserStructureProto structures = 3;
     required LocationProto userLocation = 4;						
     required CoordinateProto aviaryCoordinates = 5;
     required CoordinateProto refineryCoordinates = 6;
     required CoordinateProto carpenterCoordinates = 7;     
     optional int32 referrerCode = 8;
}
//CREATE UTILITY METHOD- unlockCityRankOneForCityId(int cityId)
message UserCreateResponseProto {
	required FullUserProto sender = 1;
	required StartupStatus status = 2;
	
    enum StartupStatus {
		SUCCESS = 0; 
		FAIL = 1;
	}  
}

//------------------------------------------------------------------------------------------

message ChangeUserLocationRequestProto {
     required MinimumUserProto sender = 1;
     optional int32 cityId = 2;
     required LocationProto userLocation = 3;    
}

//------------------------------------------------------------------------------------------

																						//DONE
message RetrieveTasksForCityRequestProto {
     required MinimumUserProto sender = 1;
     optional int32 cityId = 2;
}

																						//DONE
message RetrieveTasksForCityResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullTaskProto tasks = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message RetrieveEquipmentForArmoryRequestProto {
     required MinimumUserProto sender = 1;
}
																						//DONE
message RetrieveEquipmentForArmoryResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullEquipProto equips = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message TaskActionRequestProto {
	required MinimumUserProto sender = 1;
	required int32 taskId = 2;
}

																						//DONE
message TaskActionResponseProto {
	required MinimumUserProto sender = 1;
	required TaskActionStatus status = 2;
	optional bool taskCompleted = 3;
	optional bool cityRankedUp = 4;
	optional int32 lootEquipId = 5;
	optional int32 coinsGained = 6;
	
	optional int32 coinBonusIfCityRankup = 7;
	optional int32 expBonusIfCityRankup = 8;
	
	enum TaskActionStatus {
		SUCCESS = 0; 
		USER_NOT_ENOUGH_ENERGY = 1;
		USER_NOT_ALL_REQUIRED_ITEMS = 2;
		INVALID_TASK_ID = 3;
	} 
}

//------------------------------------------------------------------------------------------

																						//DONE
message PurchaseNormStructureRequestProto {
	required MinimumUserProto sender = 1;
	required CoordinateProto structCoordinates = 2;
	required int32 structId = 3;
}

																						//DONE
message PurchaseNormStructureResponseProto {
	required MinimumUserProto sender = 1;
	required PurchaseNormStructureStatus status = 2;
	optional int32 userStructId = 3;
	
	enum PurchaseNormStructureStatus {
		SUCCESS = 0;
		NOT_ENOUGH_COINS = 1;
		NOT_ENOUGH_DIAMONDS = 2;
		NOT_ENOUGH_WOOD = 3;
		LEVEL_TOO_LOW = 4;
		OTHER_FAIL = 5;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message MoveNormStructureRequestProto {
	required MinimumUserProto sender = 1;
	required int32 userStructId = 2;
	required CoordinateProto curStructCoordinates = 3;
}

																						//DONE
message MoveNormStructureResponseProto {
	required MinimumUserProto sender = 1;
	required MoveNormStructureStatus status = 2;
	
	enum MoveNormStructureStatus {
		SUCCESS = 0;
		FAIL = 1;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message SellNormStructureRequestProto {
	required MinimumUserProto sender = 1;
	required int32 userStructId = 2;
	required int32 soldStructId = 3;		//optimization to prevent db call
}

																						//DONE
message SellNormStructureResponseProto {
	required MinimumUserProto sender = 1;
	required SellNormStructureStatus status = 2;
	
	enum SellNormStructureStatus {
		SUCCESS = 0;
		FAIL = 1;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message UpgradeNormStructureRequestProto {
	required MinimumUserProto sender = 1;
	required int32 userStructId = 2;
}

																						//DONE
message UpgradeNormStructureResponseProto {
	required MinimumUserProto sender = 1;
	required UpgradeNormStructureStatus status = 2;
	
	enum UpgradeNormStructureStatus {
		SUCCESS = 0;
		NOT_ENOUGH_DIAMONDS = 1;
		NOT_ENOUGH_COINS = 2;
		NOT_ENOUGH_WOOD = 3;
		OTHER_FAIL = 4;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message RetrieveCurrencyFromNormStructureRequestProto {
	required MinimumUserProto sender = 1;
	required int32 userStructId = 2;
	required int64 timeOfRetrieval = 3;	
}

																						//DONE
message RetrieveCurrencyFromNormStructureResponseProto {
	required MinimumUserProto sender = 1;
	required RetrieveCurrencyFromNormStructureStatus status = 2;
	
	enum RetrieveCurrencyFromNormStructureStatus {
		SUCCESS = 0;
		NOT_LONG_ENOUGH = 1;
		OTHER_FAIL = 2;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message CriticalStructureActionRequestProto {
	required MinimumUserProto sender = 1;
	required CoordinateProto critStructCoordinates = 2;
	required CritStructType critStructType = 3;
	required CritStructAction critStructAction = 4;
	
	enum CritStructAction {
		PLACE = 1;
		MOVE = 2;
	}
}

																						//DONE
message CriticalStructureActionResponseProto {
	required MinimumUserProto sender = 1;
	required CriticalStructureAction status = 3;
	
	enum CriticalStructureAction {
		SUCCESS = 0;
		CANNOT_PLACE_NON_PLACEABLE_CRIT_STRUCT = 1;	//we only place armory/vault/marketplace 
		NOT_ACCESSIBLE_TO_USERS_LEVEL = 2;
		CANNOT_MOVE_AVIARY = 3;
		OTHER_FAIL = 4;	
	}
}

//------------------------------------------------------------------------------------------

message LevelUpResponseProto {
     required FullUserProto sender = 1;
     optional int32 maxCityIdAccessibleToUser = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message InAppPurchaseRequestProto {
	required MinimumUserProto sender = 1;
	required string receipt = 2;
}

																						//DONE
message InAppPurchaseResponseProto {
	required MinimumUserProto sender = 1;
	required InAppPurchaseStatus status = 2;
	optional int32 diamondsGained = 3;
	
	enum InAppPurchaseStatus {
		SUCCESS = 0;
		FAIL = 1;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message UpdateClientUserResponseProto {
     required FullUserProto sender = 1;
     required int64 timeOfUserUpdate = 2;				//new Date().getTime(); milliseconds since 1/1/70
}

//------------------------------------------------------------------------------------------

message RetrieveCurrentMarketplacePostsRequestProto {
	required MinimumUserProto sender = 1;
	optional int32 beforeThisPostId = 2;
	required bool fromSender = 3;
}

																						//DONE
message RetrieveCurrentMarketplacePostsResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullMarketplacePostProto marketplacePosts = 2;
     optional int32 beforeThisPostId = 3;
     required bool fromSender = 4;
}

//------------------------------------------------------------------------------------------

																						//DONE
message PostToMarketplaceRequestProto {
	required MinimumUserProto sender = 1;
	required MarketplacePostType postType = 2;
	optional int32 postedEquipId = 3;
	optional int32 postedWood = 4;
	optional int32 postedDiamonds = 5;
	optional int32 postedCoins = 6;
	optional int32 diamondCost = 7;
	optional int32 coinCost = 8;
	optional int32 woodCost = 9;
}

																						//DONE
message PostToMarketplaceResponseProto {
     required MinimumUserProto sender = 1;
     required PostToMarketplaceStatus status = 2;
    
    enum PostToMarketplaceStatus {
		SUCCESS = 0;
		NEGATIVE_POST = 1;
		NOT_ENOUGH_EQUIP = 2;
		NEGATIVE_COST = 3;
		NO_COST = 4;
		USER_ALREADY_MAX_MARKETPLACE_POSTS = 5;
		NOT_ENOUGH_WOOD = 6;
		NOT_ENOUGH_DIAMONDS = 7;
		NOT_ENOUGH_COINS = 8;
		OTHER_FAIL = 9;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message RetractMarketplacePostRequestProto {
	required MinimumUserProto sender = 1;
	required int32 marketplacePostId = 2;
}

																						//DONE
message RetractMarketplacePostResponseProto {
     required MinimumUserProto sender = 1;
     required RetractMarketplacePostStatus status = 2;

	enum RetractMarketplacePostStatus {
		SUCCESS = 0;
		NOT_REQUESTERS_POST = 1;
		POST_NO_LONGER_EXISTS = 2;
		NOT_ENOUGH_WOOD = 3;
		NOT_ENOUGH_DIAMONDS = 4;
		NOT_ENOUGH_COINS = 5;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message PurchaseFromMarketplaceRequestProto {
	required MinimumUserProto sender = 1;
	required int32 marketplacePostId = 2;
	required int32 posterId = 3;
}

																						//DONE
message PurchaseFromMarketplaceResponseProto {
     required MinimumUserProto sender = 1;
     required PurchaseFromMarketplaceStatus status = 2;

	enum PurchaseFromMarketplaceStatus {
		SUCCESS = 0;
		NOT_ENOUGH_MATERIALS = 1;
		POST_NO_LONGER_EXISTS = 2;
		PURCHASER_IS_SELLER = 3;
		OTHER_FAIL = 4;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message UseSkillPointRequestProto {
	required MinimumUserProto sender = 1;
	required BoostType boostType = 2;
	
	enum BoostType {
		ATTACK = 0;
		DEFENSE = 1;
		ENERGY = 2;
		HEALTH = 3;
		STAMINA = 4;
	}
}

																						//DONE
message UseSkillPointResponseProto {
     required MinimumUserProto sender = 1;
     required UseSkillPointStatus status = 2;
     
     enum UseSkillPointStatus {
		SUCCESS = 0;
		NOT_ENOUGH_SKILL_POINTS = 1;
		OTHER_FAIL = 2;
	}
}

//------------------------------------------------------------------------------------------

																						//DONE
message GenerateAttackListRequestProto {
	required MinimumUserProto sender = 1;
	optional UserType enemyType = 2;
	optional int32 numEnemies = 3; 
}

																						//DONE
message GenerateAttackListResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullUserProto enemies = 2;
}

//------------------------------------------------------------------------------------------

																						//DONE
message RefillStatWithDiamondsRequestProto {
	required MinimumUserProto sender = 1;
	required StatType statType = 2;

	enum StatType {
		ENERGY = 0;
		STAMINA = 1;
	}
}

																						//DONE
message RefillStatWithDiamondsResponseProto {
     required MinimumUserProto sender = 1;
     required RefillStatStatus status = 2;
     
     enum RefillStatStatus {
     	SUCCESS = 0;
     	NOT_ENOUGH_DIAMONDS = 1;
     	OTHER_FAIL = 2;
     }
}

//------------------------------------------------------------------------------------------

//done for both finishing a struct's building and instantly gettin income
																						//DONE
message FinishNormStructWaittimeWithDiamondsRequestProto {
	required MinimumUserProto sender = 1;
	required int32 userStructId = 2;
	required int64 timeOfPurchase = 3;			//lastRetrieved will start with this date
	required NormStructWaitTimeType waitTimeType = 4;

	enum NormStructWaitTimeType {
		FINISH_CONSTRUCTION = 0;
		FINISH_INCOME_WAITTIME = 1;
	}
}

																						//DONE
message FinishNormStructWaittimeWithDiamondsResponseProto {
     required MinimumUserProto sender = 1;
     required FinishNormStructWaittimeStatus status = 2;
     
     enum FinishNormStructWaittimeStatus {
     	SUCCESS = 0;
     	NOT_ENOUGH_DIAMONDS = 1;
     	OTHER_FAIL = 2;
     }
}


//------------------------------------------------------------------------------------------


//this message sent to server after a player's homepage is loaded and client checks which structs 
//have been built but not reflected in db yet (so when is_complete=0 but the purchase_time 
//implies that it should be)
//this message is also sent whenever the player is on the screen and the build completes
//i would set last_retrieved manually to when it should have completed, and is_complete=1
											
																						//DONE
//NOT VERY EFFICIENT..extra db call. and for every newly built building, new db call. but w/e for now.																						
message NormStructBuildsCompleteRequestProto {
	required MinimumUserProto sender = 1;
	repeated int32 userStructId = 2;
}

																						//DONE
message NormStructBuildsCompleteResponseProto {
     required MinimumUserProto sender = 1;
     required NormStructBuildsCompleteStatus status = 2;
     repeated FullUserStructureProto userStruct = 3;
     
     enum NormStructBuildsCompleteStatus {
     	SUCCESS = 0;
     	OTHER_FAIL = 1;
     }
}


//------------------------------------------------------------------------------------------

																						//DONE
message RedeemMarketplaceEarningsRequestProto {
	required MinimumUserProto sender = 1;
}

																						//DONE
message RedeemMarketplaceEarningsResponseProto {
     required MinimumUserProto sender = 1;
     required RedeemMarketplaceEarningsStatus status = 2;
     
     enum RedeemMarketplaceEarningsStatus {
     	SUCCESS = 0;
     	OTHER_FAIL = 1;
     }
}

//------------------------------------------------------------------------------------------

																						//DONE
message LoadPlayerCityRequestProto {
	required MinimumUserProto sender = 1;
	required MinimumUserProto cityOwner = 2;
}

																						//DONE
message LoadPlayerCityResponseProto {
    required MinimumUserProto sender = 1;
	required LoadPlayerCityStatus status = 2;
	repeated FullUserStructureProto ownerNormStructs = 3;
	repeated FullUserProto ownerAllies = 4;

    optional CoordinateProto armoryCoords = 5;
    optional CoordinateProto vaultCoords = 6;
    optional CoordinateProto marketplaceCoords = 7;
    required CoordinateProto lumbermillCoords = 8;
    required CoordinateProto carpenterCoords = 9;
    required CoordinateProto aviaryCoords = 10;
     
    enum LoadPlayerCityStatus {
     	SUCCESS = 0;
     	NO_SUCH_PLAYER = 1;
     	OTHER_FAIL = 2;
     }
}

//------------------------------------------------------------------------------------------

message QuestAcceptRequestProto {
     required MinimumUserProto sender = 1;
     required int32 questId = 2;
}

message QuestAcceptResponseProto {
     required MinimumUserProto sender = 1;
     required QuestAcceptStatus status = 2;

     enum QuestAcceptStatus {
          SUCCESS = 0;
          NOT_AVAIL_TO_USER = 1;
          OTHER_FAIL = 2;
     }
}

//------------------------------------------------------------------------------------------

message QuestCompleteResponseProto {
     required MinimumUserProto sender = 1;
     required int32 questId = 2;
}

//------------------------------------------------------------------------------------------

message QuestRedeemRequestProto {                         //take away all the required items in here
     required MinimumUserProto sender = 1;
     required int32 questId = 2;
}

message QuestRedeemResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullQuestProto updatedAvailableQuests = 2;
     required QuestRedeemStatus status = 3;    

     enum QuestRedeemStatus {
          SUCCESS = 0;
          NOT_COMPLETE = 1;
          OTHER_FAIL = 2;
     }
}

//------------------------------------------------------------------------------------------

message QuestCheckCompleteRequestProto {
     required MinimumUserProto sender = 1;
     required int32 questId = 2;
}

message QuestCheckCompleteResponseProto {
     required MinimumUserProto sender = 1;
     required QuestCompleteStatus status = 3;    

     enum QuestCompleteStatus {
          COMPLETE = 0;
          NOT_COMPLETE = 1;
          OTHER_FAIL = 2;
     }
}

//------------------------------------------------------------------------------------------

message QuestLogDetailsRequestProto {
     required MinimumUserProto sender = 1;
}

message QuestLogDetailsResponseProto {
     required MinimumUserProto sender = 1;
     repeated FullUserQuestDataLarge inProgressUserQuestData = 2;

    required QuestLogDetailsStatus status = 3;    

     enum QuestLogDetailsStatus {
          SUCCESS = 0;
          OTHER_FAIL = 1;
     }
}

